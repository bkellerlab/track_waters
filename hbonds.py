import numpy as np


def map_w_to_index(t, t_red, idx_file, atom_mapping, verbose=False):
    '''
    Map water name to index in each frame of reduced trajectory.

    This function maps the indices of water residues in a reduced trajectory to
    water letter codes corresponding to water oxygen atom indices of the whole
    trajectory, mapped by track_s1_water. This applies to water reduced
    trajectories generated by the dynamic search of remove_far_waters and
    tracked s1 pocket water with track_s1_water.

    Parameters
    ----------
    t : md.Trajectory
        Whole trajectory on which track_s1_water was run
    t_red : md.Trajectory
        Reduced trajectory generated by dynamic search of remove_far_waters.
    idx_file : str
        Path to water indices file generated by remove_far_waters.
    atom_mapping : dict
        Mapping of water atom indices to water letter codes as generated by
        track_s1_water. The keys need to be the water letter codes and values
        numpy arrays of shape (n_frames,) that hold the water oxygen atom
        indices for each frame.
    verbose : bool
        Verbose mode.
    '''
    # water residue indices in reduced and whole/actual trajectory
    wrid_red = [r.index for r in t_red.top.residues if r.is_water]
    wrid_whole = np.loadtxt(idx_file).astype('int')

    # enforce integer type on mapping
    atom_mapping = atom_mapping.astype('int')

    # list of letter codes from mapping
    letter_codes = [x for x in atom_mapping.keys()]

    # assign water residue indices of whole trj to letter codes
    wrid_letters = {}
    for wl in letter_codes:
        wrid_letters[wl] = np.array([t.top.atom(x).residue.index for x in atom_mapping[wl]])

    # map water residue indices of reduced trj to letter codes
    mapping_res = {}
    for wl in letter_codes:
        mapping_res[wl] = np.zeros(t.n_frames, dtype=int)
        for i_frame in range(t.n_frames):
            wrid = wrid_letters[wl][i_frame]
            if wrid in wrid_whole[i_frame]:
                res_idx, = np.where(wrid_whole[i_frame] == wrid)
                if len(res_idx) == 1:
                    res_idx = res_idx[0]
                else:
                    raise ValueError(f'More than one index {wrid} in frame {i_frame}.')

                mapping_res[wl][i_frame] = wrid_red[res_idx]

            else:
                mapping_res[wl][i_frame] = 0

    return mapping_res


def convert_hb_atom(idx,
                    t,
                    is_sidechain=None,
                    is_water=None,
                    wlet_mapping=None,
                    mapping_frame=None):
    '''
    Converts atom index to hbond string.

    Parameters
    ----------
    idx : int
        Atom index of hydrogen bond donor or acceptor.
    t : md.Trajectory
        Trajectory in which the atom index can be found.
    is_sidechain : np.ndarray or None
        Atom indices of sidechain atoms in trajectory. If None, will be selected
        from t.
    is_water : np.ndarray or None
        Atom indices of water atoms in trajectory. If None, will be selected
        from t.
    wlet_mapping : 
    '''
    # already converted
    if type(idx) == str:
        return idx

    # not ideal to load every time
    if not type(is_sidechain) == np.ndarray:
        is_sidechain = t.top.select('is_sidechain')
    if not type(is_water) == np.ndarray:
        is_water = t.top.select('is_water')

    a = t.top.atom(idx)
    if idx in is_water:
        if wlet_mapping:
            s = a.residue.name + str(a.residue.resSeq) + 'w' + f'-{a.element.symbol}'
            for wl in wlet_mapping:
                w_id = wlet_mapping[wl].astype('int')[mapping_frame]
                if w_id == a.residue.index and w_id != 0:
                    s = wl
        else:
            s = a.residue.name + str(a.residue.resSeq) + 'w' + f'-{a.element.symbol}'
    elif idx in is_sidechain:
        s = a.residue.name + str(a.residue.resSeq) + 's' + f'-{a.element.symbol}'
    else:
        s = a.residue.name + str(a.residue.resSeq) + 'b' + f'-{a.element.symbol}'
    return s


def hbond_to_string(hbonds,
                    t,
                    wlet_mapping=None):
    '''
    Converts atom indices from mdtraj hbond output to strings indicating residue and sidechain/backbone. Deletes H-Atom.

    Parameters
    ----------
    hbonds : list of np.ndarray
        Output from md.wernet_nilsson().
    t : md.Trajectory
        Trajectory from which the hbonds were computed.

    Returns
    -------
    hbonds_new : list of np.ndarray
        Hbonds with replaced atom indices for strings.
    '''
    hbonds_new = []
    is_sidechain = t.top.select('is_sidechain')
    is_water = t.top.select('is_water')

    for i_frame, frame in enumerate(hbonds):
        if not wlet_mapping:
            donors = np.array([convert_hb_atom(x, t, is_sidechain, is_water) for x in frame.T[0]])
            acceptors = np.array([convert_hb_atom(x, t, is_sidechain, is_water)
                                  for x in frame.T[2]])
        else:
            donors = np.array([convert_hb_atom(x, t, is_sidechain, is_water,
                                               wlet_mapping, i_frame) for x in frame.T[0]])
            acceptors = np.array([convert_hb_atom(x, t, is_sidechain, is_water,
                                                  wlet_mapping, i_frame) for x in frame.T[2]])

        frame_new = np.dstack((donors, acceptors))[0]
        hbonds_new.append(frame_new)

    return hbonds_new
